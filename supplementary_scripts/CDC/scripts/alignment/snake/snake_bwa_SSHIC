##-----------------------------------------------------------------------------------##
## The list of samples to be processed
##-----------------------------------------------------------------------------------##
BASE2="/workdir/data/CDC/hic/merged"
BASE="/workdir/users/agk85/CDC"
BASE3=BASE+"/mapping/metagenomes3/bwa_alignments_SSHIC"
#SAMPLES, = glob_wildcards(BASE + "/todo/{NAME}")
SAMPLES, = glob_wildcards("/workdir/data/CDC/sureselect/{NAME}SS.1.fastq")
NB_SAMPLES = len(SAMPLES)
print (SAMPLES)

rule final:
	input:
		expand(BASE+"/logs3/finals/{NAME}hic_final_map_bwa_SS", NAME=SAMPLES),
		expand(BASE+"/logs3/finals/{NAME}hic_final_map_filter_SS", NAME=SAMPLES),
		expand(BASE+"/logs3/finals/{NAME}hic_final_map_sortbam_SS", NAME=SAMPLES),
		expand(BASE+"/logs3/finals/{NAME}hic_final_map_rpkm_new_SS", NAME=SAMPLES)

rule bwa:
	input:
		r1=BASE2 + "/{NAME}hic.1.fastq",
		r2=BASE2 + "/{NAME}hic.2.fastq"
	params:
		n="bwa_{NAME}hic",
		ref="PICARTT_Noyes",
		j="8",
		temp=BASE3+"/{NAME}hic.temp.bam",
		flagstats=BASE3 + "/flagstats",
		out=BASE3
	resources:
		mem_mb= lambda wildcards, attempt: attempt * 8
	output:
		outfile=BASE3+"/{NAME}hic.sam",
		flagfile=BASE3+"/flagstats/{NAME}hic_prefilter_flagstats.txt",
		final=BASE + "/logs3/finals/{NAME}hic_final_map_bwa_SS"
	message:"""---map_bwa"""
	shell:
		"""
		if [ ! -d {params.out} ]; then mkdir -p {params.out}; fi
		export PATH=/programs/bwa-0.7.13:$PATH
		export PATH=/programs/samtools-1.6/bin:$PATH
		/programs/bwa-0.7.8/bwa mem -a -t 8  /workdir/users/agk85/CDC/mapping/metagenomes3/references/{params.ref} {input.r1} {input.r2} > {output.outfile}
		samtools view -bh {output.outfile}  > {params.temp}
		samtools flagstat {params.temp} > {output.flagfile}
		rm {params.temp}
		touch {output.final}
		"""

rule filter:
	input:
		sam=BASE3+"/{NAME}hic.sam"
	params:
		n="filter_{NAME}hic",
		j="1"
	resources:
		mem_mb= lambda wildcards, attempt: attempt * 15
	output:
		filtersam=BASE3+"/{NAME}hic.filtered.sam",
		filterbam=BASE3+"/{NAME}hic.filtered.bam",
		flagfile=BASE3+"/flagstats/{NAME}hic_filter_flagstats.txt",
		final=BASE + "/logs3/finals/{NAME}hic_final_map_filter_SS"
	message:"""---bwafilter"""
	shell:
		"""
		export PATH=/programs/samtools-1.6/bin:$PATH
		perl /workdir/scripts/analysing_alignments/filterSamByIdentity.pl {input.sam} 98 0 0 1 1 > {output.filtersam}
		samtools view -b {output.filtersam} > {output.filterbam}
		samtools flagstat {output.filterbam} > {output.flagfile}
		rm {input.sam}
		touch {output.final}
		"""

rule sortbam:
	input:
		filterbam=BASE3+"/{NAME}hic.filtered.bam"
	params:
		n="sortbam_{NAME}hic",
		name="{NAME}hic",
		j="8"
	resources:
		mem_mb= lambda wildcards, attempt: attempt * 30
	output:
		sortbam=BASE3+"/{NAME}hic.sorted.bam",
		idxstats=BASE3+"/{NAME}hic.idxstats.txt",
		depth=BASE3+"/{NAME}hic.depth.txt",
		flagfile=BASE3+"/flagstats/{NAME}hic_sorted_flagstats.txt",
		final=BASE + "/logs3/finals/{NAME}hic_final_map_sortbam_SS"
	message:"""---sortbam"""
	shell:
		"""
		export PATH=/programs/samtools-1.6/bin:$PATH
		samtools view -h -F 0x900 {input.filterbam} | samtools sort -m 3G -O BAM --threads 8 -o {output.sortbam} -T {params.name}
		samtools index {output.sortbam}
		samtools idxstats {output.sortbam} > {output.idxstats}
		samtools depth -a {output.sortbam} > {output.depth}
		samtools flagstat {output.sortbam} > {output.flagfile}
		touch {output.final}
		rm {input.filterbam}
		"""

rule rpkm:
	input:
                idxstats=BASE3+"/{NAME}hic.idxstats.txt",
                depth=BASE3+"/{NAME}hic.depth.txt",
		F1=BASE2+"/{NAME}hic.1.fastq",
		F2=BASE2+"/{NAME}hic.2.fastq"
	params:
		j="1",
		n="rpkm_{NAME}"
	resources:
		mem_mb= lambda wildcards, attempt: attempt * 30
	output:
		depth=BASE3+"/{NAME}hic.rpkm.txt",
		final=BASE + "/logs3/finals/{NAME}hic_final_map_rpkm_new_SS"
	message:"""---rpkm"""
	shell:
		"""
		a=($(wc -l {input.F1}))
		b=($(wc -l {input.F2}))
		python /workdir/scripts/analysing_alignments/rpkm_calculate.py -s {input.idxstats} -d {input.depth} -o {output.depth} -f1 $a -f2 $b
		touch {output.final}
		"""
		

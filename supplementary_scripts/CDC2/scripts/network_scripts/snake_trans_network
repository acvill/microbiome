##--------------------------------------------------------------------------##
## The list of samples to be processed
##--------------------------------------------------------------------------##
FOLDER="CDC2"
BASE="/workdir/users/agk85/" + FOLDER
CUTOFF='1'
IDENTITY='0'
#REF="ProxiMeta-1" #if things arent just all to one reference, then  you can change it later in the rscript
SAMPLES, = glob_wildcards(BASE + "/todoCDC/{NAME}")
NB_SAMPLES = len(SAMPLES)
print (SAMPLES)

rule final:
	input:
		expand(BASE+"/logs/finals/{NAME}_trans_final",NAME=SAMPLES),
		expand(BASE+"/logs/finals/{NAME}_normalize_"+CUTOFF+"_final",NAME=SAMPLES),
		#expand(BASE+"/networks/logs/{NAME}_final_network_rscript_" + CUTOFF + "_" + IDENTITY,NAME=SAMPLES),
		#expand(BASE+"/networks/logs/{NAME}_final_network_checkm_" + CUTOFF + "_" + IDENTITY,NAME=SAMPLES),

rule get_trans_noeuks_phagerepair:
	input:
		validPairs=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_allValidPairs",
	params:
		script1="/workdir/users/agk85/CDC2/scripts/convert_hicpro_to_trans.py",
		script2="/workdir/users/agk85/CDC2/scripts/hic_relink_excise.py",
		script3="/workdir/users/agk85/CDC2/scripts/remove_eukaryote_trans.py",
		scf=BASE+"/prodigal_excise/metagenomes/{NAME}/{NAME}_scaffold.fasta",
		combo_table=BASE+"/combo_tables/metagenomes/{NAME}_master_scf_table.txt",
		folder=FOLDER,
		n="trans_{NAME}",
		j="1",
		name="{NAME}",
		pid="0",
	resources:
		mem_mb = lambda wildcards, attempt: attempt * 5
	output:
		final=BASE+"/logs/finals/{NAME}_trans_final",
		output=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0.txt",
		outnoeuks=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_noeuks.txt",
		ncol=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol.txt",
		withexcise=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise.txt",
		withexcisenoeuks=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise_noeuks.txt"
	message:"""---trans"""
	shell:
		"""
		python {params.script1} -i {input.validPairs} -o {output.output}
		cut -f3,9 {output.output} | sort | uniq -c | awk '{{print $2 "\\t" $3 "\\t" $1}}' > {output.ncol}
		python {params.script2} {params.combo_table} {output.ncol} {output.withexcise}
		python {params.script3} {params.folder} {params.pid} {params.name}
		touch {output.final}
		"""

rule normalize:
	input:
		withexcise=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise_noeuks.txt"
	params:
		n="normalize_{NAME}",
		j="1",
		#change this to normalize_trans.py if you want with rpkm
		script="/workdir/users/agk85/CDC2/scripts/normalize_trans_norpkm.py",
		#rpkm=BASE+"/mapping/{NAME}/{NAME}.rpkm.txt",
		min=CUTOFF,
		scf=BASE+"/prodigal_excise/metagenomes/{NAME}/{NAME}_scaffold.fasta",
	resources:
		mem_mb = lambda wildcards, attempt: attempt*2
	output:
		final=BASE+"/logs/finals/{NAME}_normalize_"+CUTOFF+"_final",
		outfile=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise_noeuks_normalize_" + CUTOFF + ".txt"
	message:"""---normalize"""
	shell:
		"""
		python {params.script} -o {output.outfile} -t {input.withexcise} -s {params.scf} -m {params.min}
		touch {output.final}
		"""

rule rscript:
	input:
		trans=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise_noeuks.txt",
		norm=BASE+"/hicpro/output/{NAME}_output/hic_results/data/{NAME}/{NAME}_trans_primary_0_ncol_withexcise_noeuks_normalize_" + CUTOFF + ".txt"
	params:
		n="rscript_{NAME}",
		name="{NAME}",
		name2="{NAME}",
		script="/workdir/users/agk85/CDC2/scripts/network_scripts/network_clustering.R",
		cutoff=CUTOFF,
		identity=IDENTITY,
		mgeness="mge",
		norm="count",
		j="1",
		folder=FOLDER,
		ref_mgm="{NAME}",
		out=BASE+"/networks/membership",
		out2=BASE+"/networks/outputs",
		out3=BASE+"/networks/graphs",
	resources:
		mem_mb = lambda wildcards, attempt: attempt * 10
	output:
		outfile=BASE + "/networks/membership/{NAME}_"+CUTOFF+"_mge_count_membership.txt",
		final=BASE + "/networks/logs/{NAME}_final_network_rscript_" + CUTOFF + "_" + IDENTITY
	message:"""---rscript"""	
	shell:
		"""
		if [ ! -e {params.out} ]; then mkdir -p {params.out}; fi
		if [ ! -e {params.out2} ]; then mkdir -p {params.out2}; fi
		if [ ! -e {params.out3} ]; then mkdir -p {params.out3}; fi
		cd {params.out}
		/programs/R-3.3.2/bin/Rscript {params.script} {params.folder} {params.name} {params.name2} {params.mgeness} {params.norm} {params.cutoff}
		touch {output.final}
		"""
rule checkm:
	input:
		members=BASE + "/networks/membership/{NAME}_"+CUTOFF+"_mge_count_membership.txt",
	params:
		n="checkm_{NAME}",
		j="8",
		reference=BASE+"/prodigal_excise/metagenomes/{NAME}/{NAME}_scaffold.fasta",
		script="/workdir/users/agk85/CDC2/scripts/network_scripts/split_clusters_hic.py",
		fasta_folder=BASE + "/networks/clusters_"+CUTOFF+"/{NAME}",
		lineage=BASE + "/networks/checkms_"+CUTOFF+"/{NAME}/lineage.ms",
		checkm_folder=BASE + "/networks/checkms_"+CUTOFF+"/{NAME}",
		checkm_qa=BASE+"/networks/checkms_"+CUTOFF+"/{NAME}/{NAME}.qa",
		name="{NAME}",
	resources:
		mem_mb = lambda wildcards, attempt: attempt * 40
	output:
		final = BASE + "/networks/logs/{NAME}_final_network_checkm_" + CUTOFF + "_" + IDENTITY,
		checkm_stats=BASE+"/networks/checkms_"+CUTOFF+"/{NAME}/{NAME}.stats",
	message:"""---checkm"""
	shell:
		"""
		if [ ! -d {params.fasta_folder} ]; then mkdir -p {params.fasta_folder}; fi
		python {params.script} {input.members} {params.reference} {params.fasta_folder} {params.name}
		set +u; source  /programs/checkm_161011/init; set -u 
		checkm lineage_wf -t 8 -x fasta {params.fasta_folder} {params.checkm_folder}
		checkm qa -o 2 {params.lineage} {params.checkm_folder} | grep -v '^-' > {params.checkm_qa}
		awk -v OFS="\t" '$1=$1' {params.checkm_qa} | grep -v '^Bin' | cut -f1,2,7,8,9,10 > {output.checkm_stats};
		sed -i "s/^/{params.name}\t/" {output.checkm_stats};
		touch {output.final}
		"""
